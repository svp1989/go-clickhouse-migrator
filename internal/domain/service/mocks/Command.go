// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	model "go-clickhouse-migrator/internal/domain/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

// CurrentVersion provides a mock function with given fields: ctx, params
func (_m *Command) CurrentVersion(ctx context.Context, params model.MigrationQueryParams) (model.MigrationInfo, error) {
	ret := _m.Called(ctx, params)

	var r0 model.MigrationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationQueryParams) (model.MigrationInfo, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationQueryParams) model.MigrationInfo); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.MigrationInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MigrationQueryParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutedMigration provides a mock function with given fields: ctx, params
func (_m *Command) ExecutedMigration(ctx context.Context, params model.MigrationQueryParams) (map[string]model.MigrationInfo, error) {
	ret := _m.Called(ctx, params)

	var r0 map[string]model.MigrationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationQueryParams) (map[string]model.MigrationInfo, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationQueryParams) map[string]model.MigrationInfo); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.MigrationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MigrationQueryParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, params
func (_m *Command) Init(ctx context.Context, params model.MigrationQueryParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationQueryParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, migration, params
func (_m *Command) Save(ctx context.Context, migration model.MigrationInfo, params model.MigrationQueryParams) error {
	ret := _m.Called(ctx, migration, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MigrationInfo, model.MigrationQueryParams) error); ok {
		r0 = rf(ctx, migration, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Up provides a mock function with given fields: ctx, query
func (_m *Command) Up(ctx context.Context, query string) error {
	ret := _m.Called(ctx, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommand creates a new instance of Command. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *Command {
	mock := &Command{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
